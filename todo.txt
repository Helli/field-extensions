combinig the two branches:
make lists for both branches: good/bad
the sorry-part in the current for-prof-kemper is "M \<in> ?\<M> ==> Eval \<equiv> UnivPoly.eval (L\<lparr>carrier := K\<rparr>)
(L\<lparr>carrier := M\<rparr>) id s", maybe a sensible thing to prove anyway (or the symmetric variant?), try it
in the new setup"
merge (via cherry-pick?)
make everything build again

check whether examples still work with this:
locale field_extension = field L + K?: field "L\<lparr>carrier := K\<rparr>" for L (structure) and K +
  assumes "K \<subseteq> carrier L"
(* no need for a subring-definition at all *)

the examples from the lecture notes are not that important

If Examples.thy gets too messy:
  maybe prove that complex_of_real etc. are epimorphisms? Then the field-property should translate
  to their image.

**Questions**

Why are the current locales (e.g. subgroup) so conservative in importing other locales? Are there
good reasons for that?

After proving an interpretation of ring:
Duplicate fact declaration "Examples.rsr.add.finprod_one" vs. "Examples.rsr.add.finprod_one"\<^here>
The above error(s) occurred while activating locale instance
rsr.add :
  Group.comm_monoid
    "\<lparr>carrier = carrier (standard_ring (range rat_of_int)), monoid.mult = (\<oplus>\<^bsub>standard_ring (range rat_of_int)\<^esub>),
        one = \<zero>\<^bsub>standard_ring (range rat_of_int)\<^esub>\<rparr>"

Can the context-command use for-clauses to rename the variables? Or maybe rewrite-clauses are for that?

How to simplify facts during interpretation or locale definition?
